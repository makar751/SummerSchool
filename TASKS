Задание 1.
Написать скрипт создания инкрементальной резервной копии данных из каталога с возможностью указания исключенных из резервирования путей.
Результатом должен быть скрипт backup.sh с параметрами:
1) Путь данных для резервирования
2) Путь где создается резервная копия
3) Способ архивирования:
      a) tar
      b) если параметр не указан, то без архивирования
Исключаемые из резервирования пути хранятся в файле backup.

Задание 2, дополнительное.
Необходимо подменить системный вызов open. Вести:
- подсчет количества его вызовов
или
- минимального, максимального и среднего времени вызова (желательно использовать tcs регистр процессора)
Отобразить полученную информацию через файловую систему proc
Пример подмены системных вызовом может быть найден тут:
https://maitesin.github.io/Module_prank/

Задание 3
Написать модуль ядра с интерфейсом символьного драйвера, предоставляющего возможность
обмена информацией между процессами. Организовать в модуле циклический буфер.
Обеспечить блокировку процессов при недоступности места в буфере или отсутствии данных
Модуль должен проходить проверку:
cat movie_4k.mp4 > /dev/myipc
cat /dev/myipc > movie_4k.copy

Задание 4
Реализовать модуль ядра Linux, представляющий три символьных устройва для ввода-вывода данных блоками по 8, 16 и 32 бита соответственно: /dev/memb, /dev/memw, /dev/meml. Тип API (порты ввода-вывода или ввод-вывод через память), базовый адрес/номер первого порта, размер сегмента памяти/количество портов вводятся как параметры модуля при его загрузке. Семантика операций чтения/записи символьного устройства должна быть эквивалентна семантике чтения/записи файла, отображенного на заданный участок памяти. 


